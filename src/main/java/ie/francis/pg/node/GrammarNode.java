/*
 * (c) 2024 Francis McNamee
 * */
 
package ie.francis.pg.node;

import static ie.francis.pg.StringUtil.indentLines;

import ie.francis.pg.Version;
import java.util.ArrayList;
import java.util.List;

public class GrammarNode implements Node {

  private final List<Node> nodes;
  private String code;

  public GrammarNode() {
    this.nodes = new ArrayList<>();
    this.code = "";
  }

  public GrammarNode addNode(Node node) {
    this.nodes.add(node);
    return this;
  }

  public GrammarNode setCode(String code) {
    this.code = code;
    return this;
  }

  @Override
  public String print(int depth) {
    StringBuilder sb = new StringBuilder();
    sb.append(String.format("/* Generated by pg v%s */\n\n", Version.VERSION_STRING));
    sb.append("class Parser {\n");
    sb.append("\n");
    if (!code.equals("")) {
      sb.append(indentLines(code, depth + 1));
      sb.append("\n");
    }
    for (Node node : this.nodes) {
      sb.append(node.print(depth + 1));
      sb.append("\n\n");
    }
    StringBuilder nextTokenBuilder = new StringBuilder();
    nextTokenBuilder.append("private boolean nextTokenIs(TokenType tokenType) {\n");
    nextTokenBuilder.append("\treturn scanner.peek().type() == tokenType;\n");
    nextTokenBuilder.append("}\n");
    sb.append(indentLines(nextTokenBuilder.toString(), depth + 1));
    sb.append("}\n");
    return sb.toString();
  }

  @Override
  public String code() {
    return "";
  }

  @Override
  public String name() {
    return "grammar";
  }
}
