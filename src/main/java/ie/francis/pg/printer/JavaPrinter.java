/*
 * (c) 2024 Francis McNamee
 * */
 
package ie.francis.pg.printer;

import ie.francis.pg.Production;
import ie.francis.pg.Version;
import ie.francis.pg.term.NonTerminal;
import ie.francis.pg.term.Optional;
import ie.francis.pg.term.Plus;
import ie.francis.pg.term.Star;
import ie.francis.pg.term.Term;
import ie.francis.pg.term.Terminal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class JavaPrinter extends BasePrinter implements Printer {

  public JavaPrinter(Production... productions) {
    super(productions);
  }

  @Override
  public String print() {

    cp.append(String.format("/* Generated by pg v%s */\n\n", Version.VERSION_STRING));
    cp.append("class Parser {\n\n");

    for (Map.Entry<NonTerminal, List<Production>> entry : this.productions.entrySet()) {
      NonTerminal nonTerminal = entry.getKey();
      List<Production> productions = entry.getValue();

      cp.append(
          String.format(
              "%s// %s : %s\n",
              StringUtil.indent(depth + 1), productions.get(0).nonTerminal(), productions.get(0)));
      for (int i = 1; i < productions.size(); i++) {
        Production production = productions.get(i);
        cp.append(
            String.format(
                "%s// %s | %s\n",
                StringUtil.indent(depth + 1),
                StringUtil.indent(production.nonTerminal().name().length(), ' '),
                production));
      }
      cp.append(
          String.format(
              "%spublic void %s() {\n\n%s",
              StringUtil.indent(depth + 1), nonTerminal.name(), StringUtil.indent(depth + 2)));
      StringBuilder ifBuilder = new StringBuilder();
      for (int i = 0; i < productions.size(); i++) {

        StringBuilder ifConditionBuilder = new StringBuilder();
        List<String> first = new ArrayList<>(first(productions.get(i)));
        for (int j = 0; j < first.size(); j++) {
          ifConditionBuilder.append(String.format("nextTokenIs(%s)", first.get(j)));
          if (j + 1 < first.size()) {
            ifConditionBuilder.append(" || ");
          }
        }

        ifBuilder.append(String.format("if (%s) {\n", ifConditionBuilder));

        List<Term> terms = productions.get(i).terms();
        for (Term term : terms) {
          ifBuilder.append(print(term));
        }

        if (i + 1 < productions.size()) {
          ifBuilder.append(String.format("%s} else ", StringUtil.indent(depth + 2)));
        } else {
          ifBuilder.append(String.format("%s}\n\n", StringUtil.indent(depth + 2)));
        }
      }
      cp.append(ifBuilder);
      cp.append(String.format("%s}\n\n", StringUtil.indent(depth + 1)));
    }
    cp.append("}\n");

    return cp.toString();
  }

  @Override
  public String print(Optional optional) {
    StringBuilder sb = new StringBuilder();

    StringBuilder ifConditionBuilder = new StringBuilder();
    Term first = optional.expand().get(0);
    Set<String> firstSet = new HashSet<>();
    firstSet.add(first.toString());
    if (first instanceof NonTerminal) {
      firstSet = first((NonTerminal) first);
    }

    List<String> firstList = new ArrayList<>(firstSet);
    for (int i = 0; i < firstList.size(); i++) {
      ifConditionBuilder.append(String.format("nextTokenIs(%s)", firstList.get(i)));
      if (i + 1 < firstList.size()) {
        ifConditionBuilder.append(" || ");
      }
    }

    sb.append(String.format("%sif (%s) {\n", StringUtil.indent(depth + 3), ifConditionBuilder));
    sb.append(String.format("%sscanner.next();\n", StringUtil.indent(depth + 4)));
    sb.append(String.format("%s}\n", StringUtil.indent(depth + 3)));
    return sb.toString();
  }

  @Override
  public String print(Plus plus) {
    StringBuilder sb = new StringBuilder();

    StringBuilder doWhileConditonBuilder = new StringBuilder();
    Term first = plus.expand().get(0);
    Set<String> firstSet = new HashSet<>();
    firstSet.add(first.toString());
    if (first instanceof NonTerminal) {
      firstSet = first((NonTerminal) first);
    }

    List<String> firstList = new ArrayList<>(firstSet);
    for (int i = 0; i < firstList.size(); i++) {
      doWhileConditonBuilder.append(String.format("nextTokenIs(%s)", firstList.get(i)));
      if (i + 1 < firstList.size()) {
        doWhileConditonBuilder.append(" || ");
      }
    }

    sb.append(String.format("%sscanner.next();\n", StringUtil.indent(depth + 3)));
    sb.append(String.format("%sdo {\n", StringUtil.indent(depth + 3)));
    sb.append(String.format("%sscanner.next();\n", StringUtil.indent(depth + 4)));
    sb.append(
        String.format("%s} while (%s);\n", StringUtil.indent(depth + 3), doWhileConditonBuilder));
    return sb.toString();
  }

  @Override
  public String print(Star star) {
    StringBuilder sb = new StringBuilder();

    StringBuilder whileConditonBuilder = new StringBuilder();
    Term first = star.expand().get(0);
    Set<String> firstSet = new HashSet<>();
    firstSet.add(first.toString());
    if (first instanceof NonTerminal) {
      firstSet = first((NonTerminal) first);
    }

    List<String> firstList = new ArrayList<>(firstSet);
    for (int i = 0; i < firstList.size(); i++) {
      whileConditonBuilder.append(String.format("nextTokenIs(%s)", firstList.get(i)));
      if (i + 1 < firstList.size()) {
        whileConditonBuilder.append(" || ");
      }
    }

    sb.append(
        String.format("%swhile (%s) {\n", StringUtil.indent(depth + 3), whileConditonBuilder));
    sb.append(String.format("%sscanner.next();\n", StringUtil.indent(depth + 4)));
    sb.append(String.format("%s}\n", StringUtil.indent(depth + 3)));
    return sb.toString();
  }

  @Override
  public String print(Terminal terminal) {
    return String.format("%sscanner.next();\n", StringUtil.indent(depth + 3));
  }

  @Override
  public String print(NonTerminal nonTerminal) {
    return String.format("%s%s();\n", StringUtil.indent(depth + 3), nonTerminal.name());
  }

  @Override
  public String printNonTerminalBody() {
    return "";
  }

  @Override
  public String print(Term term) {
    if (term instanceof NonTerminal) {
      return print((NonTerminal) term);
    } else if (term instanceof Terminal) {
      return print((Terminal) term);
    } else if (term instanceof Optional) {
      return print((Optional) term);
    } else if (term instanceof Plus) {
      return print((Plus) term);
    } else if (term instanceof Star) {
      return print((Star) term);
    }
    return null;
  }
}
